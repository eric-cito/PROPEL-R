setwd("C:/Users/Will/Desktop/week_2_assignment") library(tidyverse) library(readr) library(utils) library(janitor) test_results <- read_csv("test_results(in).csv") participants <- read_csv("participants(in).csv") groups <- read_csv("groups(in).csv") diagnosis <- read_csv("diagnosis(in).csv") str(test_results) str(participants) str(groups) # this is the file that delineates between those with and without disability str(diagnosis) # dplyr method for joining dataframe that will not drop rows in either dataframe if the participant_id is not found in the other dataframe # no need to worry about arrange() or sort() since tidyverse/dplyr will match rows by the participant_id column value # left vs right join: left join will keep all rows from the left dataframe, right join will keep all rows from the right dataframe, #inner join will keep all rows from both dataframes where the participant_id is found in both dataframes, outer join will keep all rows from both dataframes regardless of the participant_id test_results_participants <- full_join(test_results, participants, by = "participant_id") groups_diagnosis <- full_join(groups, diagnosis, by = "participant_id") df <- full_join(test_results_participants, groups_diagnosis, by = "participant_id") # df modificaitons df$treatment <- ifelse(grepl("1", df$group), "One-on-one delivery", ifelse(grepl("2", df$group), "Mixed delivery", NA)) df$disability <- ifelse(grepl("0", df$no_disability), "No disability", ifelse(grepl("1", df$no_disability), "Disability", NA)) View(df) # variable types: # treatment (Disability/No disability): independent, categorical, qualitative # Woodcock Johnson III outcome measures (gain): dependent, continuous, quantitative run_anovas <- function(df, dependent_variable, independent_variable = "treatment") { results <- list() for (var in dependent_variable) { anova_combinations <- as.formula(paste(var, "~", independent_variable)) anova <- aov(anova_combinations, data = df) results[[var]] <- summary(anova) } return(results) } dependent_variable <- c( "associative_memory_gain", "visual_processing_gain", "auditory_processing_gain", "logic_reasoning_gain", "processing_speed_gain", "working_memory_gain", "long_term_memory_gain", "iq_gain" ) anova_results <- run_anovas(df, dependent_variable) View(anova_results) # grouped by treatment only statistics_summary <- df %>% group_by(treatment) %>% summarise( mean_associative_memory_gain = mean(associative_memory_gain), sd_associative_memory_gain = sd(associative_memory_gain), mean_visual_processing_gain = mean(visual_processing_gain), sd_visual_processing_gain = sd(visual_processing_gain), mean_auditory_processing_gain = mean(auditory_processing_gain), sd_auditory_processing_gain = sd(auditory_processing_gain), mean_logic_reasoning_gain = mean(logic_reasoning_gain), sd_logic_reasoning_gain = sd(logic_reasoning_gain), mean_processing_speed_gain = mean(processing_speed_gain), sd_processing_speed_gain = sd(processing_speed_gain), mean_working_memory_gain = mean(working_memory_gain), sd_working_memory_gain = sd(working_memory_gain), mean_long_term_memory_gain = mean(long_term_memory_gain), sd_long_term_memory_gain = sd(long_term_memory_gain), mean_iq_gain = mean(iq_gain), sd_iq_gain = sd(iq_gain) ) column_names <- statistics_summary$treatment statistics_summary <- as.data.frame(t(statistics_summary[,-1])) colnames(statistics_summary) <- column_names statistics_summary$'M1-M2' <- statistics_summary$One-on-one delivery - statistics_summary$Mixed delivery View(statistics_summary) rewrite this code using the framework already used to imitate this datatable; also, include calculations for cohen's d

** included a picture of the table **